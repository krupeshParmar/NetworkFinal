// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_5fgame_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_5fgame_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_5fgame_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_5fgame_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fgame_2eproto;
namespace proto_game {
class RecvState;
struct RecvStateDefaultTypeInternal;
extern RecvStateDefaultTypeInternal _RecvState_default_instance_;
class SentState;
struct SentStateDefaultTypeInternal;
extern SentStateDefaultTypeInternal _SentState_default_instance_;
}  // namespace proto_game
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_game::RecvState* Arena::CreateMaybeMessage<::proto_game::RecvState>(Arena*);
template<> ::proto_game::SentState* Arena::CreateMaybeMessage<::proto_game::SentState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_game {

// ===================================================================

class SentState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_game.SentState) */ {
 public:
  inline SentState() : SentState(nullptr) {}
  ~SentState() override;
  explicit constexpr SentState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SentState(const SentState& from);
  SentState(SentState&& from) noexcept
    : SentState() {
    *this = ::std::move(from);
  }

  inline SentState& operator=(const SentState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SentState& operator=(SentState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SentState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SentState* internal_default_instance() {
    return reinterpret_cast<const SentState*>(
               &_SentState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SentState& a, SentState& b) {
    a.Swap(&b);
  }
  inline void Swap(SentState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SentState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SentState* New() const final {
    return new SentState();
  }

  SentState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SentState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SentState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SentState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SentState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_game.SentState";
  }
  protected:
  explicit SentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIDFieldNumber = 2,
    kPlayerIDFieldNumber = 1,
    kPosXFieldNumber = 3,
    kPosZFieldNumber = 4,
    kTarXFieldNumber = 5,
    kTarZFieldNumber = 6,
  };
  // required string requestID = 2;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  const std::string& requestid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestid();
  PROTOBUF_MUST_USE_RESULT std::string* release_requestid();
  void set_allocated_requestid(std::string* requestid);
  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(const std::string& value);
  std::string* _internal_mutable_requestid();
  public:

  // required int32 playerID = 1;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float posX = 3;
  bool has_posx() const;
  private:
  bool _internal_has_posx() const;
  public:
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // required float posZ = 4;
  bool has_posz() const;
  private:
  bool _internal_has_posz() const;
  public:
  void clear_posz();
  float posz() const;
  void set_posz(float value);
  private:
  float _internal_posz() const;
  void _internal_set_posz(float value);
  public:

  // required float tarX = 5;
  bool has_tarx() const;
  private:
  bool _internal_has_tarx() const;
  public:
  void clear_tarx();
  float tarx() const;
  void set_tarx(float value);
  private:
  float _internal_tarx() const;
  void _internal_set_tarx(float value);
  public:

  // required float tarZ = 6;
  bool has_tarz() const;
  private:
  bool _internal_has_tarz() const;
  public:
  void clear_tarz();
  float tarz() const;
  void set_tarz(float value);
  private:
  float _internal_tarz() const;
  void _internal_set_tarz(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto_game.SentState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  float posx_;
  float posz_;
  float tarx_;
  float tarz_;
  friend struct ::TableStruct_proto_5fgame_2eproto;
};
// -------------------------------------------------------------------

class RecvState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_game.RecvState) */ {
 public:
  inline RecvState() : RecvState(nullptr) {}
  ~RecvState() override;
  explicit constexpr RecvState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecvState(const RecvState& from);
  RecvState(RecvState&& from) noexcept
    : RecvState() {
    *this = ::std::move(from);
  }

  inline RecvState& operator=(const RecvState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecvState& operator=(RecvState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecvState& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecvState* internal_default_instance() {
    return reinterpret_cast<const RecvState*>(
               &_RecvState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RecvState& a, RecvState& b) {
    a.Swap(&b);
  }
  inline void Swap(RecvState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecvState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecvState* New() const final {
    return new RecvState();
  }

  RecvState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecvState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecvState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecvState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecvState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_game.RecvState";
  }
  protected:
  explicit RecvState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameStateFieldNumber = 1,
  };
  // required string gameState = 1;
  bool has_gamestate() const;
  private:
  bool _internal_has_gamestate() const;
  public:
  void clear_gamestate();
  const std::string& gamestate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gamestate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gamestate();
  PROTOBUF_MUST_USE_RESULT std::string* release_gamestate();
  void set_allocated_gamestate(std::string* gamestate);
  private:
  const std::string& _internal_gamestate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gamestate(const std::string& value);
  std::string* _internal_mutable_gamestate();
  public:

  // @@protoc_insertion_point(class_scope:proto_game.RecvState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamestate_;
  friend struct ::TableStruct_proto_5fgame_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SentState

// required int32 playerID = 1;
inline bool SentState::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SentState::has_playerid() const {
  return _internal_has_playerid();
}
inline void SentState::clear_playerid() {
  playerid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SentState::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SentState::playerid() const {
  // @@protoc_insertion_point(field_get:proto_game.SentState.playerID)
  return _internal_playerid();
}
inline void SentState::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  playerid_ = value;
}
inline void SentState::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:proto_game.SentState.playerID)
}

// required string requestID = 2;
inline bool SentState::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SentState::has_requestid() const {
  return _internal_has_requestid();
}
inline void SentState::clear_requestid() {
  requestid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SentState::requestid() const {
  // @@protoc_insertion_point(field_get:proto_game.SentState.requestID)
  return _internal_requestid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SentState::set_requestid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 requestid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_game.SentState.requestID)
}
inline std::string* SentState::mutable_requestid() {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:proto_game.SentState.requestID)
  return _s;
}
inline const std::string& SentState::_internal_requestid() const {
  return requestid_.Get();
}
inline void SentState::_internal_set_requestid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SentState::_internal_mutable_requestid() {
  _has_bits_[0] |= 0x00000001u;
  return requestid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SentState::release_requestid() {
  // @@protoc_insertion_point(field_release:proto_game.SentState.requestID)
  if (!_internal_has_requestid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return requestid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SentState::set_allocated_requestid(std::string* requestid) {
  if (requestid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  requestid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:proto_game.SentState.requestID)
}

// required float posX = 3;
inline bool SentState::_internal_has_posx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SentState::has_posx() const {
  return _internal_has_posx();
}
inline void SentState::clear_posx() {
  posx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SentState::_internal_posx() const {
  return posx_;
}
inline float SentState::posx() const {
  // @@protoc_insertion_point(field_get:proto_game.SentState.posX)
  return _internal_posx();
}
inline void SentState::_internal_set_posx(float value) {
  _has_bits_[0] |= 0x00000004u;
  posx_ = value;
}
inline void SentState::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:proto_game.SentState.posX)
}

// required float posZ = 4;
inline bool SentState::_internal_has_posz() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SentState::has_posz() const {
  return _internal_has_posz();
}
inline void SentState::clear_posz() {
  posz_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float SentState::_internal_posz() const {
  return posz_;
}
inline float SentState::posz() const {
  // @@protoc_insertion_point(field_get:proto_game.SentState.posZ)
  return _internal_posz();
}
inline void SentState::_internal_set_posz(float value) {
  _has_bits_[0] |= 0x00000008u;
  posz_ = value;
}
inline void SentState::set_posz(float value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:proto_game.SentState.posZ)
}

// required float tarX = 5;
inline bool SentState::_internal_has_tarx() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SentState::has_tarx() const {
  return _internal_has_tarx();
}
inline void SentState::clear_tarx() {
  tarx_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float SentState::_internal_tarx() const {
  return tarx_;
}
inline float SentState::tarx() const {
  // @@protoc_insertion_point(field_get:proto_game.SentState.tarX)
  return _internal_tarx();
}
inline void SentState::_internal_set_tarx(float value) {
  _has_bits_[0] |= 0x00000010u;
  tarx_ = value;
}
inline void SentState::set_tarx(float value) {
  _internal_set_tarx(value);
  // @@protoc_insertion_point(field_set:proto_game.SentState.tarX)
}

// required float tarZ = 6;
inline bool SentState::_internal_has_tarz() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SentState::has_tarz() const {
  return _internal_has_tarz();
}
inline void SentState::clear_tarz() {
  tarz_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float SentState::_internal_tarz() const {
  return tarz_;
}
inline float SentState::tarz() const {
  // @@protoc_insertion_point(field_get:proto_game.SentState.tarZ)
  return _internal_tarz();
}
inline void SentState::_internal_set_tarz(float value) {
  _has_bits_[0] |= 0x00000020u;
  tarz_ = value;
}
inline void SentState::set_tarz(float value) {
  _internal_set_tarz(value);
  // @@protoc_insertion_point(field_set:proto_game.SentState.tarZ)
}

// -------------------------------------------------------------------

// RecvState

// required string gameState = 1;
inline bool RecvState::_internal_has_gamestate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecvState::has_gamestate() const {
  return _internal_has_gamestate();
}
inline void RecvState::clear_gamestate() {
  gamestate_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RecvState::gamestate() const {
  // @@protoc_insertion_point(field_get:proto_game.RecvState.gameState)
  return _internal_gamestate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecvState::set_gamestate(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 gamestate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_game.RecvState.gameState)
}
inline std::string* RecvState::mutable_gamestate() {
  std::string* _s = _internal_mutable_gamestate();
  // @@protoc_insertion_point(field_mutable:proto_game.RecvState.gameState)
  return _s;
}
inline const std::string& RecvState::_internal_gamestate() const {
  return gamestate_.Get();
}
inline void RecvState::_internal_set_gamestate(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gamestate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RecvState::_internal_mutable_gamestate() {
  _has_bits_[0] |= 0x00000001u;
  return gamestate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RecvState::release_gamestate() {
  // @@protoc_insertion_point(field_release:proto_game.RecvState.gameState)
  if (!_internal_has_gamestate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gamestate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RecvState::set_allocated_gamestate(std::string* gamestate) {
  if (gamestate != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gamestate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamestate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:proto_game.RecvState.gameState)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_5fgame_2eproto
