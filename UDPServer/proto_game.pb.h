// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_5fgame_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_5fgame_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_5fgame_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_5fgame_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fgame_2eproto;
namespace proto_game {
class GameState;
struct GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class PlayerState;
struct PlayerStateDefaultTypeInternal;
extern PlayerStateDefaultTypeInternal _PlayerState_default_instance_;
}  // namespace proto_game
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_game::GameState* Arena::CreateMaybeMessage<::proto_game::GameState>(Arena*);
template<> ::proto_game::PlayerState* Arena::CreateMaybeMessage<::proto_game::PlayerState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_game {

// ===================================================================

class PlayerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_game.PlayerState) */ {
 public:
  inline PlayerState() : PlayerState(nullptr) {}
  ~PlayerState() override;
  explicit constexpr PlayerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerState(const PlayerState& from);
  PlayerState(PlayerState&& from) noexcept
    : PlayerState() {
    *this = ::std::move(from);
  }

  inline PlayerState& operator=(const PlayerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerState& operator=(PlayerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerState* internal_default_instance() {
    return reinterpret_cast<const PlayerState*>(
               &_PlayerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerState& a, PlayerState& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerState* New() const final {
    return new PlayerState();
  }

  PlayerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_game.PlayerState";
  }
  protected:
  explicit PlayerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIDFieldNumber = 1,
    kRequestNoFieldNumber = 2,
    kPosXFieldNumber = 3,
    kPosZFieldNumber = 4,
    kBulletposXFieldNumber = 5,
    kBulletposZFieldNumber = 6,
    kInputFieldNumber = 7,
    kIsShotFieldNumber = 8,
  };
  // required int32 playerID = 1;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 requestNo = 2;
  bool has_requestno() const;
  private:
  bool _internal_has_requestno() const;
  public:
  void clear_requestno();
  ::PROTOBUF_NAMESPACE_ID::int32 requestno() const;
  void set_requestno(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestno() const;
  void _internal_set_requestno(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float posX = 3;
  bool has_posx() const;
  private:
  bool _internal_has_posx() const;
  public:
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // required float posZ = 4;
  bool has_posz() const;
  private:
  bool _internal_has_posz() const;
  public:
  void clear_posz();
  float posz() const;
  void set_posz(float value);
  private:
  float _internal_posz() const;
  void _internal_set_posz(float value);
  public:

  // required float bulletposX = 5;
  bool has_bulletposx() const;
  private:
  bool _internal_has_bulletposx() const;
  public:
  void clear_bulletposx();
  float bulletposx() const;
  void set_bulletposx(float value);
  private:
  float _internal_bulletposx() const;
  void _internal_set_bulletposx(float value);
  public:

  // required float bulletposZ = 6;
  bool has_bulletposz() const;
  private:
  bool _internal_has_bulletposz() const;
  public:
  void clear_bulletposz();
  float bulletposz() const;
  void set_bulletposz(float value);
  private:
  float _internal_bulletposz() const;
  void _internal_set_bulletposz(float value);
  public:

  // required int32 input = 7;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  ::PROTOBUF_NAMESPACE_ID::int32 input() const;
  void set_input(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input() const;
  void _internal_set_input(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool isShot = 8;
  bool has_isshot() const;
  private:
  bool _internal_has_isshot() const;
  public:
  void clear_isshot();
  bool isshot() const;
  void set_isshot(bool value);
  private:
  bool _internal_isshot() const;
  void _internal_set_isshot(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto_game.PlayerState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestno_;
  float posx_;
  float posz_;
  float bulletposx_;
  float bulletposz_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_;
  bool isshot_;
  friend struct ::TableStruct_proto_5fgame_2eproto;
};
// -------------------------------------------------------------------

class GameState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_game.GameState) */ {
 public:
  inline GameState() : GameState(nullptr) {}
  ~GameState() override;
  explicit constexpr GameState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameState(const GameState& from);
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameState& operator=(GameState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }
  inline void Swap(GameState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameState* New() const final {
    return new GameState();
  }

  GameState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_game.GameState";
  }
  protected:
  explicit GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // required string state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_MUST_USE_RESULT std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:proto_game.GameState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  friend struct ::TableStruct_proto_5fgame_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerState

// required int32 playerID = 1;
inline bool PlayerState::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerState::has_playerid() const {
  return _internal_has_playerid();
}
inline void PlayerState::clear_playerid() {
  playerid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerState::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerState::playerid() const {
  // @@protoc_insertion_point(field_get:proto_game.PlayerState.playerID)
  return _internal_playerid();
}
inline void PlayerState::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  playerid_ = value;
}
inline void PlayerState::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:proto_game.PlayerState.playerID)
}

// required int32 requestNo = 2;
inline bool PlayerState::_internal_has_requestno() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerState::has_requestno() const {
  return _internal_has_requestno();
}
inline void PlayerState::clear_requestno() {
  requestno_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerState::_internal_requestno() const {
  return requestno_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerState::requestno() const {
  // @@protoc_insertion_point(field_get:proto_game.PlayerState.requestNo)
  return _internal_requestno();
}
inline void PlayerState::_internal_set_requestno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  requestno_ = value;
}
inline void PlayerState::set_requestno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestno(value);
  // @@protoc_insertion_point(field_set:proto_game.PlayerState.requestNo)
}

// required float posX = 3;
inline bool PlayerState::_internal_has_posx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerState::has_posx() const {
  return _internal_has_posx();
}
inline void PlayerState::clear_posx() {
  posx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PlayerState::_internal_posx() const {
  return posx_;
}
inline float PlayerState::posx() const {
  // @@protoc_insertion_point(field_get:proto_game.PlayerState.posX)
  return _internal_posx();
}
inline void PlayerState::_internal_set_posx(float value) {
  _has_bits_[0] |= 0x00000004u;
  posx_ = value;
}
inline void PlayerState::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:proto_game.PlayerState.posX)
}

// required float posZ = 4;
inline bool PlayerState::_internal_has_posz() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlayerState::has_posz() const {
  return _internal_has_posz();
}
inline void PlayerState::clear_posz() {
  posz_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PlayerState::_internal_posz() const {
  return posz_;
}
inline float PlayerState::posz() const {
  // @@protoc_insertion_point(field_get:proto_game.PlayerState.posZ)
  return _internal_posz();
}
inline void PlayerState::_internal_set_posz(float value) {
  _has_bits_[0] |= 0x00000008u;
  posz_ = value;
}
inline void PlayerState::set_posz(float value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:proto_game.PlayerState.posZ)
}

// required float bulletposX = 5;
inline bool PlayerState::_internal_has_bulletposx() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PlayerState::has_bulletposx() const {
  return _internal_has_bulletposx();
}
inline void PlayerState::clear_bulletposx() {
  bulletposx_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PlayerState::_internal_bulletposx() const {
  return bulletposx_;
}
inline float PlayerState::bulletposx() const {
  // @@protoc_insertion_point(field_get:proto_game.PlayerState.bulletposX)
  return _internal_bulletposx();
}
inline void PlayerState::_internal_set_bulletposx(float value) {
  _has_bits_[0] |= 0x00000010u;
  bulletposx_ = value;
}
inline void PlayerState::set_bulletposx(float value) {
  _internal_set_bulletposx(value);
  // @@protoc_insertion_point(field_set:proto_game.PlayerState.bulletposX)
}

// required float bulletposZ = 6;
inline bool PlayerState::_internal_has_bulletposz() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PlayerState::has_bulletposz() const {
  return _internal_has_bulletposz();
}
inline void PlayerState::clear_bulletposz() {
  bulletposz_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PlayerState::_internal_bulletposz() const {
  return bulletposz_;
}
inline float PlayerState::bulletposz() const {
  // @@protoc_insertion_point(field_get:proto_game.PlayerState.bulletposZ)
  return _internal_bulletposz();
}
inline void PlayerState::_internal_set_bulletposz(float value) {
  _has_bits_[0] |= 0x00000020u;
  bulletposz_ = value;
}
inline void PlayerState::set_bulletposz(float value) {
  _internal_set_bulletposz(value);
  // @@protoc_insertion_point(field_set:proto_game.PlayerState.bulletposZ)
}

// required int32 input = 7;
inline bool PlayerState::_internal_has_input() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PlayerState::has_input() const {
  return _internal_has_input();
}
inline void PlayerState::clear_input() {
  input_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerState::_internal_input() const {
  return input_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerState::input() const {
  // @@protoc_insertion_point(field_get:proto_game.PlayerState.input)
  return _internal_input();
}
inline void PlayerState::_internal_set_input(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  input_ = value;
}
inline void PlayerState::set_input(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_input(value);
  // @@protoc_insertion_point(field_set:proto_game.PlayerState.input)
}

// required bool isShot = 8;
inline bool PlayerState::_internal_has_isshot() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PlayerState::has_isshot() const {
  return _internal_has_isshot();
}
inline void PlayerState::clear_isshot() {
  isshot_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool PlayerState::_internal_isshot() const {
  return isshot_;
}
inline bool PlayerState::isshot() const {
  // @@protoc_insertion_point(field_get:proto_game.PlayerState.isShot)
  return _internal_isshot();
}
inline void PlayerState::_internal_set_isshot(bool value) {
  _has_bits_[0] |= 0x00000080u;
  isshot_ = value;
}
inline void PlayerState::set_isshot(bool value) {
  _internal_set_isshot(value);
  // @@protoc_insertion_point(field_set:proto_game.PlayerState.isShot)
}

// -------------------------------------------------------------------

// GameState

// required string state = 1;
inline bool GameState::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameState::has_state() const {
  return _internal_has_state();
}
inline void GameState::clear_state() {
  state_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameState::state() const {
  // @@protoc_insertion_point(field_get:proto_game.GameState.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameState::set_state(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_game.GameState.state)
}
inline std::string* GameState::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:proto_game.GameState.state)
  return _s;
}
inline const std::string& GameState::_internal_state() const {
  return state_.Get();
}
inline void GameState::_internal_set_state(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameState::_internal_mutable_state() {
  _has_bits_[0] |= 0x00000001u;
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameState::release_state() {
  // @@protoc_insertion_point(field_release:proto_game.GameState.state)
  if (!_internal_has_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return state_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameState::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:proto_game.GameState.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_5fgame_2eproto
