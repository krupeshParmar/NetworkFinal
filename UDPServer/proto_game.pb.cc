// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_game.proto

#include "proto_game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace proto_game {
constexpr PlayerState::PlayerState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(0)
  , requestno_(0)
  , posx_(0)
  , posz_(0)
<<<<<<< HEAD
  , tarx_(0)
  , tarz_(0){}
struct SentStateDefaultTypeInternal {
  constexpr SentStateDefaultTypeInternal()
=======
  , bulletposx_(0)
  , bulletposz_(0)
  , input_(0)
  , isshot_(false){}
struct PlayerStateDefaultTypeInternal {
  constexpr PlayerStateDefaultTypeInternal()
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerStateDefaultTypeInternal() {}
  union {
    PlayerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerStateDefaultTypeInternal _PlayerState_default_instance_;
constexpr GameState::GameState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GameStateDefaultTypeInternal {
  constexpr GameStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameStateDefaultTypeInternal() {}
  union {
    GameState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameStateDefaultTypeInternal _GameState_default_instance_;
}  // namespace proto_game
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_5fgame_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_5fgame_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_5fgame_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_5fgame_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto_game::PlayerState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_game::PlayerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
<<<<<<< HEAD
  PROTOBUF_FIELD_OFFSET(::proto_game::SentState, playerid_),
  PROTOBUF_FIELD_OFFSET(::proto_game::SentState, requestid_),
  PROTOBUF_FIELD_OFFSET(::proto_game::SentState, posx_),
  PROTOBUF_FIELD_OFFSET(::proto_game::SentState, posz_),
  PROTOBUF_FIELD_OFFSET(::proto_game::SentState, tarx_),
  PROTOBUF_FIELD_OFFSET(::proto_game::SentState, tarz_),
  1,
=======
  PROTOBUF_FIELD_OFFSET(::proto_game::PlayerState, playerid_),
  PROTOBUF_FIELD_OFFSET(::proto_game::PlayerState, requestno_),
  PROTOBUF_FIELD_OFFSET(::proto_game::PlayerState, posx_),
  PROTOBUF_FIELD_OFFSET(::proto_game::PlayerState, posz_),
  PROTOBUF_FIELD_OFFSET(::proto_game::PlayerState, bulletposx_),
  PROTOBUF_FIELD_OFFSET(::proto_game::PlayerState, bulletposz_),
  PROTOBUF_FIELD_OFFSET(::proto_game::PlayerState, input_),
  PROTOBUF_FIELD_OFFSET(::proto_game::PlayerState, isshot_),
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
  0,
  1,
  2,
  3,
  4,
  5,
<<<<<<< HEAD
  PROTOBUF_FIELD_OFFSET(::proto_game::RecvState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_game::RecvState, _internal_metadata_),
=======
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto_game::GameState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_game::GameState, _internal_metadata_),
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_game::GameState, state_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
<<<<<<< HEAD
  { 0, 12, -1, sizeof(::proto_game::SentState)},
  { 18, 25, -1, sizeof(::proto_game::RecvState)},
=======
  { 0, 14, -1, sizeof(::proto_game::PlayerState)},
  { 22, 29, -1, sizeof(::proto_game::GameState)},
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_game::_PlayerState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_game::_GameState_default_instance_),
};

const char descriptor_table_protodef_proto_5fgame_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
<<<<<<< HEAD
  "\n\020proto_game.proto\022\nproto_game\"h\n\tSentSt"
  "ate\022\020\n\010playerID\030\001 \002(\005\022\021\n\trequestID\030\002 \002(\t"
  "\022\014\n\004posX\030\003 \002(\002\022\014\n\004posZ\030\004 \002(\002\022\014\n\004tarX\030\005 \002"
  "(\002\022\014\n\004tarZ\030\006 \002(\002\"\036\n\tRecvState\022\021\n\tgameSta"
  "te\030\001 \002(\t"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_5fgame_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fgame_2eproto = {
  false, false, 168, descriptor_table_protodef_proto_5fgame_2eproto, "proto_game.proto", 
=======
  "\n\020proto_game.proto\022\nproto_game\"\225\001\n\013Playe"
  "rState\022\020\n\010playerID\030\001 \002(\005\022\021\n\trequestNo\030\002 "
  "\002(\005\022\014\n\004posX\030\003 \002(\002\022\014\n\004posZ\030\004 \002(\002\022\022\n\nbulle"
  "tposX\030\005 \002(\002\022\022\n\nbulletposZ\030\006 \002(\002\022\r\n\005input"
  "\030\007 \002(\005\022\016\n\006isShot\030\010 \002(\010\"\032\n\tGameState\022\r\n\005s"
  "tate\030\001 \002(\t"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_5fgame_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fgame_2eproto = {
  false, false, 210, descriptor_table_protodef_proto_5fgame_2eproto, "proto_game.proto", 
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
  &descriptor_table_proto_5fgame_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_proto_5fgame_2eproto::offsets,
  file_level_metadata_proto_5fgame_2eproto, file_level_enum_descriptors_proto_5fgame_2eproto, file_level_service_descriptors_proto_5fgame_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_5fgame_2eproto_getter() {
  return &descriptor_table_proto_5fgame_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_5fgame_2eproto(&descriptor_table_proto_5fgame_2eproto);
namespace proto_game {

// ===================================================================

class PlayerState::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerState>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_requestno(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_posx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_posz(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
<<<<<<< HEAD
  static void set_has_tarx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tarz(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
=======
  static void set_has_bulletposx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bulletposz(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_input(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_isshot(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
  }
};

PlayerState::PlayerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto_game.PlayerState)
}
PlayerState::PlayerState(const PlayerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
<<<<<<< HEAD
    static_cast<size_t>(reinterpret_cast<char*>(&tarz_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(tarz_));
  // @@protoc_insertion_point(copy_constructor:proto_game.SentState)
=======
    static_cast<size_t>(reinterpret_cast<char*>(&isshot_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(isshot_));
  // @@protoc_insertion_point(copy_constructor:proto_game.PlayerState)
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
}

void PlayerState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
<<<<<<< HEAD
    0, static_cast<size_t>(reinterpret_cast<char*>(&tarz_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(tarz_));
=======
    0, static_cast<size_t>(reinterpret_cast<char*>(&isshot_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(isshot_));
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
}

PlayerState::~PlayerState() {
  // @@protoc_insertion_point(destructor:proto_game.PlayerState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerState::ArenaDtor(void* object) {
  PlayerState* _this = reinterpret_cast< PlayerState* >(object);
  (void)_this;
}
void PlayerState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_game.PlayerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
<<<<<<< HEAD
  if (cached_has_bits & 0x00000001u) {
    requestid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tarz_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(tarz_));
=======
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isshot_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(isshot_));
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 requestNo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_requestno(&has_bits);
          requestno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float posX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_posx(&has_bits);
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float posZ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_posz(&has_bits);
          posz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
<<<<<<< HEAD
      // required float tarX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_tarx(&has_bits);
          tarx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
=======
      // required float bulletposX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_bulletposx(&has_bits);
          bulletposx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
<<<<<<< HEAD
      // required float tarZ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_tarz(&has_bits);
          tarz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
=======
      // required float bulletposZ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_bulletposz(&has_bits);
          bulletposz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
<<<<<<< HEAD
=======
      // required int32 input = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_input(&has_bits);
          input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool isShot = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_isshot(&has_bits);
          isshot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_game.PlayerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 playerID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required int32 requestNo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_requestno(), target);
  }

  // required float posX = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_posx(), target);
  }

  // required float posZ = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_posz(), target);
  }

<<<<<<< HEAD
  // required float tarX = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_tarx(), target);
  }

  // required float tarZ = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_tarz(), target);
=======
  // required float bulletposX = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_bulletposx(), target);
  }

  // required float bulletposZ = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_bulletposz(), target);
  }

  // required int32 input = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_input(), target);
  }

  // required bool isShot = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_isshot(), target);
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_game.PlayerState)
  return target;
}

size_t PlayerState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto_game.PlayerState)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required int32 playerID = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_requestno()) {
    // required int32 requestNo = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_requestno());
  }

  if (_internal_has_posx()) {
    // required float posX = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_posz()) {
    // required float posZ = 4;
    total_size += 1 + 4;
  }

<<<<<<< HEAD
  if (_internal_has_tarx()) {
    // required float tarX = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_tarz()) {
    // required float tarZ = 6;
    total_size += 1 + 4;
  }

=======
  if (_internal_has_bulletposx()) {
    // required float bulletposX = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_bulletposz()) {
    // required float bulletposZ = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_input()) {
    // required int32 input = 7;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_input());
  }

  if (_internal_has_isshot()) {
    // required bool isShot = 8;
    total_size += 1 + 1;
  }

>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
  return total_size;
}
size_t PlayerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_game.PlayerState)
  size_t total_size = 0;

<<<<<<< HEAD
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string requestID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requestid());

=======
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
    // required int32 playerID = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());

    // required int32 requestNo = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_requestno());

    // required float posX = 3;
    total_size += 1 + 4;

    // required float posZ = 4;
    total_size += 1 + 4;

<<<<<<< HEAD
    // required float tarX = 5;
    total_size += 1 + 4;

    // required float tarZ = 6;
    total_size += 1 + 4;

=======
    // required float bulletposX = 5;
    total_size += 1 + 4;

    // required float bulletposZ = 6;
    total_size += 1 + 4;

    // required int32 input = 7;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_input());

    // required bool isShot = 8;
    total_size += 1 + 1;

>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerState::GetClassData() const { return &_class_data_; }

void PlayerState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerState *>(to)->MergeFrom(
      static_cast<const PlayerState &>(from));
}


void PlayerState::MergeFrom(const PlayerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_game.PlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
<<<<<<< HEAD
  if (cached_has_bits & 0x0000003fu) {
=======
  if (cached_has_bits & 0x000000ffu) {
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      requestno_ = from.requestno_;
    }
    if (cached_has_bits & 0x00000004u) {
      posx_ = from.posx_;
    }
    if (cached_has_bits & 0x00000008u) {
      posz_ = from.posz_;
    }
    if (cached_has_bits & 0x00000010u) {
<<<<<<< HEAD
      tarx_ = from.tarx_;
    }
    if (cached_has_bits & 0x00000020u) {
      tarz_ = from.tarz_;
=======
      bulletposx_ = from.bulletposx_;
    }
    if (cached_has_bits & 0x00000020u) {
      bulletposz_ = from.bulletposz_;
    }
    if (cached_has_bits & 0x00000040u) {
      input_ = from.input_;
    }
    if (cached_has_bits & 0x00000080u) {
      isshot_ = from.isshot_;
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerState::CopyFrom(const PlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_game.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayerState::InternalSwap(PlayerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
<<<<<<< HEAD
      PROTOBUF_FIELD_OFFSET(SentState, tarz_)
      + sizeof(SentState::tarz_)
      - PROTOBUF_FIELD_OFFSET(SentState, playerid_)>(
=======
      PROTOBUF_FIELD_OFFSET(PlayerState, isshot_)
      + sizeof(PlayerState::isshot_)
      - PROTOBUF_FIELD_OFFSET(PlayerState, playerid_)>(
>>>>>>> 25538db8b9c3707e134ffd45ef2cc8c35ae9129c
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_5fgame_2eproto_getter, &descriptor_table_proto_5fgame_2eproto_once,
      file_level_metadata_proto_5fgame_2eproto[0]);
}

// ===================================================================

class GameState::_Internal {
 public:
  using HasBits = decltype(std::declval<GameState>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameState::GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto_game.GameState)
}
GameState::GameState(const GameState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_state()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto_game.GameState)
}

void GameState::SharedCtor() {
state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:proto_game.GameState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameState::ArenaDtor(void* object) {
  GameState* _this = reinterpret_cast< GameState* >(object);
  (void)_this;
}
void GameState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_game.GameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    state_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_game.GameState.state");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_game.GameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "proto_game.GameState.state");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_game.GameState)
  return target;
}

size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_game.GameState)
  size_t total_size = 0;

  // required string state = 1;
  if (_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameState::GetClassData() const { return &_class_data_; }

void GameState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameState *>(to)->MergeFrom(
      static_cast<const GameState &>(from));
}


void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_game.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_game.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameState::InternalSwap(GameState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &state_, lhs_arena,
      &other->state_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GameState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_5fgame_2eproto_getter, &descriptor_table_proto_5fgame_2eproto_once,
      file_level_metadata_proto_5fgame_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto_game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_game::PlayerState* Arena::CreateMaybeMessage< ::proto_game::PlayerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_game::PlayerState >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_game::GameState* Arena::CreateMaybeMessage< ::proto_game::GameState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_game::GameState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
